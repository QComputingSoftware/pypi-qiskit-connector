# @Author: Dr. Jeffrey Chijioke-Uche
# @Last Modified: 2025-05-10
# @Purpose: Automatically sign all unsigned GitHub release tags/commits using GPG and verified secret identity.
# @Signer: Dr. Jeffrey Chijioke-Uche
#_______________________________________________________________________________________________________________

name: 🔐 Sign & Verify All Release Tags

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 * * * *'  # Every hour

permissions:
  contents: write
  actions: write
  deployments: write
  pull-requests: write
  checks: write
  statuses: write
  issues: write
  discussions: write
  pages: write
  packages: write
  security-events: write
  repository-projects: write

jobs:
  sign-release-tags:
    runs-on: ubuntu-latest

    env:
      GPG_NAME_REAL: ${{ secrets.GPG_NAME_REAL }}
      GPG_NAME_EMAIL: ${{ secrets.GPG_NAME_EMAIL }}
      GPG_NAME_COMMENT: ${{ secrets.GPG_NAME_COMMENT }}
      GPG_GITHUB_TOKEN: ${{ secrets.GPG_GITHUB_OPERATOR }}

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Generate GPG Key Pair
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          cat > genkey <<EOF
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: $GPG_NAME_REAL
          Name-Email: $GPG_NAME_EMAIL
          Name-Comment: $GPG_NAME_COMMENT
          Expire-Date: 0
          %no-protection
          %commit
          EOF

          echo "🔐 Generating GPG Key..."
          gpg --batch --generate-key genkey 2>/dev/null

          if [ $? -eq 0 ]; then
            echo "🔐 GPG Key generated successfully ✅"
          else
            echo "❌ GPG Key generation failed"
            exit 1
          fi

          # Extract but do NOT display full key details
          export GPG_KEY_ID=$(gpg --list-secret-keys --with-colons "$GPG_NAME_EMAIL" | grep '^sec' | cut -d':' -f5)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          #==============================================================================

      - name: ⚙️ Configure Git Identity and Signing
        run: |
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true

      - name: ☁️ Upload GPG Public Key to GitHub (overwrite dynamic)
        run: |
          echo "🔐 Exporting GPG public key..."
          PUB_KEY=$(gpg --armor --export "$GPG_NAME_EMAIL")
          TITLE="GPG PUBLIC KEY - DYNAMIC"
          
          echo "🔐 Uploading GPG public key to GitHub..."
          PAYLOAD=$(jq -n --arg key "$PUB_KEY" --arg title "$TITLE" '{armored_public_key: $key, name: $title}')
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GPG_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/gpg_keys \
            -d "$PAYLOAD")

          echo "✅ GPG key uploaded. ID: $(echo "$RESPONSE" | jq -r .id)"

          echo "🧹 Sanitizing GPG key content..."
          unset PUB_KEY
          echo "PUB_KEY=***REDACTED***"

          echo "🔒 GPG key export wiped from memory."


      - name: 🏷️ Sign All Unsigned Release Tags
        run: |
          for tag in $(git tag --sort=creatordate); do
            echo "🔍 Checking tag: $tag"
            if ! git tag -v "$tag" 2>&1 | grep -q "Good signature"; then
              echo "🔄 Re-signing tag: $tag"
              commit_sha=$(git rev-list -n 1 "$tag")
              tag_message=$(git for-each-ref --format="%(contents)" refs/tags/$tag)

              git tag -d "$tag"
              GIT_COMMITTER_DATE="$(git show -s --format=%ci "$commit_sha")" \
              GIT_AUTHOR_DATE="$(git show -s --format=%ci "$commit_sha")" \
              git tag -s "$tag" "$commit_sha" -m "$tag_message"

              git push --force origin "$tag"
            else
              echo "✅ Tag $tag already signed. Skipping."
            fi
          done

      - name: 🖊️ Sign All Unsigned Commits
        run: |
          for commit in $(git rev-list --all); do
            if ! git verify-commit $commit &>/dev/null; then
              echo "🔄 Re-signing commit: $commit"
              GIT_COMMITTER_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_NAME="$GPG_NAME_REAL" \
              GIT_AUTHOR_EMAIL="$GPG_NAME_EMAIL" \
              GIT_COMMITTER_NAME="$GPG_NAME_REAL" \
              GIT_COMMITTER_EMAIL="$GPG_NAME_EMAIL" \
              git commit --amend -S --no-edit || true
            else
              echo "✅ Commit $commit already signed. Skipping."
            fi
          done
