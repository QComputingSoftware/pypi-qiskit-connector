# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01
# @Description: This workflow calculates the monthly downloads of the Qiskit Connector package from PyPI and updates the badge in the README file.
# @File: .github/workflows/m-downloads.yml
# @Usage: This workflow is triggered on a schedule and via manual check-in of code to repository.
# @Note: The workflow uses Python to fetch download statistics from Pepy.tech Pro API.
#_________________________________________________________________________________________________________

name: 📿 Monthly Downloads

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"   # Daily at 2 AM UTC
    - cron: "0 2 * * 0"   # Sunday
    - cron: "0 2 * * 1"   # Monday
    - cron: "0 2 * * 2"   # Tuesday
    - cron: "0 2 * * 3"   # Wednesday
    - cron: "0 2 * * 4"   # Thursday
    - cron: "0 2 * * 5"   # Friday
    - cron: "0 2 * * 6"   # Saturday

permissions:
  contents: write
  actions: write

jobs:
  build-monthly-downloads-badge:
    name: 📊 Generate Monthly Downloads Badge
    runs-on: ubuntu-latest

    steps:
      - name: 📿 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Fetch Pepy Pro API using Python (explicit GET)
        id: fetch_downloads
        run: |
          echo "🔐 Connecting to Pepy Pro API using Python..."

          python3 - << 'PYCODE'
import os
import json
import urllib.request

project = "qiskit-connector"
api_key = os.environ["PEPY_API_TOKEN"]
url = f"https://pepy.tech/service-api/v1/pro/projects/{project}/downloads?includeCIDownloads=true&timeRange=FOUR_MONTHS"

req = urllib.request.Request(url, method="GET", headers={
    "X-API-Key": api_key,
    "Accept": "application/json"
})

try:
    with urllib.request.urlopen(req) as response:
        if response.status != 200:
            raise Exception(f"API responded with status code {response.status}")
        data = json.loads(response.read().decode())

    total = int(data.get("total_downloads", 0))
    monthly = round(total * 0.4333)

    with open(os.environ['GITHUB_ENV'], 'a') as env_file:
        env_file.write(f"total_downloads={total}\n")
        env_file.write(f"monthly_downloads={monthly}\n")
    print(f"✅ Total Downloads: {total}, Monthly Downloads: {monthly}")
    with open(os.environ['GITHUB_OUTPUT'], 'a') as output_file:
        output_file.write(f"total_downloads={total}\n")
        output_file.write(f"monthly_downloads={monthly}\n")
except Exception as e:
    print("❌ Failed to fetch or parse API response:", str(e))
    exit(1)
          PYCODE
        env:
          PEPY_API_TOKEN: ${{ secrets.PEPY_API_TOKEN }}

      - name: 🚰️ Generate Badge
        uses: emibcn/badge-action@v2
        with:
          label: "Monthly Downloads"
          label-color: "555"
          status: "${{ steps.fetch_downloads.outputs.monthly_downloads }}"
          color: "blue"
          style: "flat"
          path: "doc/badges/monthly-downloads.svg"

      - name: 🚀 Commit and Push Badge
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add doc/badges/monthly-downloads.svg
          git commit -m "📈 Update monthly downloads badge" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}