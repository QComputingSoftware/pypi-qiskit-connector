# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-05-03
# @Description: This workflow scrapes public Pepy.tech stats for the Qiskit Connector package and updates the badge.
# @File: .github/workflows/m-downloads.yml
# @Usage: Triggered on schedule or manually; no API key required now.
#_________________________________________________________________________________________________________

name: 📿 Monthly Downloads

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"
    - cron: "0 2 * * 0"
    - cron: "0 2 * * 1"
    - cron: "0 2 * * 2"
    - cron: "0 2 * * 3"
    - cron: "0 2 * * 4"
    - cron: "0 2 * * 5"
    - cron: "0 2 * * 6"

permissions:
  contents: write
  actions: write

jobs:
  build-monthly-downloads-badge:
    name: 📊 Monthly Downloads from Pepy
    runs-on: ubuntu-latest

    steps:
      - name: 📿 Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install qiskit-connector
          pip install requests

      #_____________________________________________________________________________ 
      #  PYTHON EXTRACT DOWNLOADS VIA API
      #_____________________________________________________________________________   
      - name: 🔍 Extract Downloads
        id: get_downloads
        run: |
          echo "🔍 Extracting download record..."
          python3 - << 'PYCODE'
          #----python starts---------------------------------------------------------DO NOT TOUCH
          
          import requests
          import os

          def get_qiskit_connector_total_downloads_pro_api_v3():
              """
              Fetches the total download count for qiskit-connector using the Pepy.tech Pro API
              with the correct endpoint and query parameters.

              Requires the PEPY_API_TOKEN environment variable to be set.

              Returns:
                  int: The total download count, or None if an error occurs.
              """
              project_name = "qiskit-connector"
              base_url = "https://api.pepy.tech"
              endpoint = f"{base_url}/service-api/v1/pro/projects/{project_name}/downloads"
              api_token = os.environ.get("PEPY_API_TOKEN")

              if not api_token:
                  print("Error: PEPY_API_TOKEN environment variable not set.")
                  return None

              headers = {"X-API-Key": api_token, "Accept": "application/json"}
              params = {"includeCIDownloads": "true", "timeRange": "FOUR_MONTHS"} # Adjust the time range as needed

              try:
                  response = requests.get(endpoint, headers=headers, params=params)
                  response.raise_for_status()  # Raise an exception for bad status codes
                  data = response.json()

                  # The response structure in the doc shows downloads per day/version.
                  # We need to sum these up to get the total.
                  total_downloads = 0
                  if "downloads" in data:
                      for date_data in data["downloads"].values():
                          for count in date_data.values():
                              total_downloads += count
                  return total_downloads

              except requests.exceptions.RequestException as e:
                  print(f"Error fetching data from Pepy Pro API: {e}")
                  return None
              except json.JSONDecodeError as e:
                  print(f"Error decoding JSON response from Pepy Pro API: {e}")
                  return None
              except Exception as e:
                  print(f"An unexpected error occurred: {e}")
                  return None

          if __name__ == "__main__":
              total_downloads = get_qiskit_connector_total_downloads_pro_api_v3()

              if total_downloads is not None:
                  print(f"Total downloads: {total_downloads}")
              else:
                  print("Failed to retrieve total download count for qiskit-connector via Pepy Pro API v3.")
                  print(f"::set-output name=monthly_downloads::0")


          # -- Do other things it needs to do here, like updating the badge or logging the result
          # -- or whatever else you need to do with the data.
          # -- For example, you could write the total downloads to a file or print it.
          # -- This is just a placeholder for whatever you want to do with the data.
          # -- You can also use the total_downloads variable in your script as needed.
          # -- For example, you could write the total downloads to a file or print it.
          # -- This is just a placeholder for whatever you want to do with the data.
          # -- You can also use the total_downloads variable in your script as needed.
          # -- For example, you could write the total downloads to a file or print it.
          # --Calculate monthly downloads with 43.33% of the total downloads & create a badge

          total_downloads = get_qiskit_connector_total_downloads_pro_api_v3()
          if total_downloads is not None:
              monthly_downloads = total_downloads * 0.4333
              print(f"Monthly downloads: {monthly_downloads}")
              print(f"::set-output name=monthly_downloads::{monthly_downloads}")
          else:
              print("Failed to retrieve total download count for qiskit-connector via Pepy Pro API v3.")
              print(f"::set-output name=monthly_downloads::0")


          #----python ends---------------------------------------------------------DO NOT TOUCH
          PYCODE
      #_____________________________________________________________________________



      #  GENERATE BADGE
      - name: 🚰️ Generate Badge
        uses: emibcn/badge-action@v2
        with:
          label: "Monthly Downloads"
          label-color: "555"
          status: "${{ steps.get_downloads.outputs.monthly_downloads }}"
          color: "blue"
          style: "flat"
          path: "doc/badges/monthly-downloads.svg"

      - name: 🚀 Commit and Push Badge
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add doc/badges/monthly-downloads.svg
          git commit -m "📈 Update monthly downloads badge" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
