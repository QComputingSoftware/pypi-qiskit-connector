# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-05-03
# @Description: This workflow scrapes public Pepy.tech stats for the Qiskit Connector package and updates the badge.
# @File: .github/workflows/m-downloads.yml
# @Usage: Triggered on schedule or manually; no API key required now.
#_________________________________________________________________________________________________________

name: üìø Monthly Downloads

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"
    - cron: "0 2 * * 0"
    - cron: "0 2 * * 1"
    - cron: "0 2 * * 2"
    - cron: "0 2 * * 3"
    - cron: "0 2 * * 4"
    - cron: "0 2 * * 5"
    - cron: "0 2 * * 6"

permissions:
  contents: write
  actions: write

jobs:
  build-monthly-downloads-badge:
    name: üìä Monthly Downloads from Pepy
    runs-on: ubuntu-latest

    steps:
      - name: üìø Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install qiskit-connector
          pip install markdown beautifulsoup4 lxml requests

      - name: üîç Extract Downloads from Badge Markdown
        id: get_downloads
        run: |
          echo "üîç Extracting download count from rendered Pepy markdown..."
          python3 - << 'PYCODE'
          import os
          import markdown
          import re
          import requests
          from bs4 import BeautifulSoup

          # Render Markdown badge to HTML
          md = "[![PyPI Downloads](https://static.pepy.tech/badge/qiskit-connector)](https://pepy.tech/project/qiskit-connector)"
          html = markdown.markdown(md)

          # Extract image URL from HTML
          soup = BeautifulSoup(html, "html.parser")
          img = soup.find("img")
          if not img or not img["src"]:
              raise ValueError("Could not find badge image URL")
          badge_url = img["src"]

          # Download badge SVG content
          response = requests.get(badge_url)
          if response.status_code != 200:
              raise ValueError(f"Failed to fetch badge: {response.status_code}")
          svg_text = response.text

          # Find download number in SVG text
          match = re.search(r'>([\d,]+)</text>', svg_text)
          if not match:
              raise ValueError("Could not extract download count from badge SVG")

          total_downloads = int(match.group(1).replace(",", ""))
          monthly_downloads = round(total_downloads * 0.4333)

          print(f"‚úÖ Total Downloads (3-mo): {total_downloads}, Monthly Estimate: {monthly_downloads}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"monthly_downloads={monthly_downloads}\n")
          PYCODE

      - name: üö∞Ô∏è Generate Badge
        uses: emibcn/badge-action@v2
        with:
          label: "Monthly Downloads"
          label-color: "555"
          status: "${{ steps.get_downloads.outputs.monthly_downloads }}"
          color: "blue"
          style: "flat"
          path: "doc/badges/monthly-downloads.svg"

      - name: üöÄ Commit and Push Badge
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add doc/badges/monthly-downloads.svg
          git commit -m "üìà Update monthly downloads badge" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
