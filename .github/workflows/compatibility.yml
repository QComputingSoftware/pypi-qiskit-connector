name: Python Compatibility
# This workflow checks the compatibility of the code with different Python versions
# and generates a badge indicating the supported versions.
# It runs on every push and pull request to the main branch.
# It uses a matrix strategy to test against multiple Python versions.
# The badge is generated using the emibcn/badge-action and pushed to the repository.
# The badge is saved in the docs/badges directory.
# The workflow consists of two jobs:
# 1. compatibility: Runs linting and testing on multiple Python versions.
# 2. generate-badge: Generates a badge indicating the supported Python versions.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  compatibility:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🧪 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🧪 Test with pytest
        run: pytest
        continue-on-error: true

      - name: ✅ Check pytest result
        if: ${{ always() }}
        run: |
          RC=$?
          if [ "$RC" -eq 5 ]; then
            echo "⚠️  No tests were collected (exit $RC), skipping."
          elif [ "$RC" -ne 0 ]; then
            echo "❌ pytest failed (exit $RC)"
            exit $RC
          else
            echo "✅ pytest passed."
          fi

  generate-badge:
    needs: compatibility
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Generate Python compatibility badge
        uses: emibcn/badge-action@v2
        with:
          label: '🐍 python'
          status: '3.8 | 3.9 | 3.10 | 3.11 | 3.12 | 3.13'
          color: green
          style: flat
          path: docs/badges/python.svg

      - name: 🚀 Push badge to repo
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add docs/badges/python.svg
          git commit -m "🔧 Update Python compatibility badge" || echo "No changes to commit"
          git pull --rebase || echo "No changes to pull"
          git config pull.rebase true
          git config pull.ff only
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
