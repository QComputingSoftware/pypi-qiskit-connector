# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01

name: Python Compatibility

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:  # Required for external workflows to trigger this via API
  
permissions:
  contents: write
  actions: write

jobs:
  compatibility:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: Qiskit Connector Active State
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          python tests/pkg_active_check.py

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: üß™ Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: üß™ Test with pytest
        run: pytest
        continue-on-error: true

      - name: ‚úÖ Check pytest result
        if: ${{ always() }}
        run: |
          RC=$?
          if [ "$RC" -eq 5 ]; then
            echo "‚ö†Ô∏è  No tests were collected (exit $RC), skipping."
          elif [ "$RC" -ne 0 ]; then
            echo "‚ùå pytest failed (exit $RC)"
            exit $RC
          else
            echo "‚úÖ pytest passed."
          fi

  generate-badge:
    needs: compatibility
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate Python compatibility badge
        uses: emibcn/badge-action@v2
        with:
          label: 'üêç python'
          status: '3.9 | 3.10 | 3.11 | 3.12 | 3.13'
          color: green
          style: flat
          path: docs/badges/python.svg


      - name: üöÄ Push and sync Python compatibility badge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Determine current branch
          CURRENT_BRANCH=${GITHUB_REF##*/}
          echo "üîé Current branch is: $CURRENT_BRANCH"

          git fetch origin main stable

          # --- Commit to CURRENT BRANCH (main or stable) ---
          git checkout "$CURRENT_BRANCH"
          git pull origin "$CURRENT_BRANCH" --rebase --autostash

          git add docs/badges/python.svg
          git commit -m "üîß Qiskit Code Update - Inteli Check" || echo "‚ö†Ô∏è No changes to commit"
          git push origin "$CURRENT_BRANCH" || echo "‚ö†Ô∏è Nothing to push"

          # --- Only sync from MAIN ‚Üí STABLE if we're on main ---
          if [[ "$CURRENT_BRANCH" == "main" ]]; then
            git checkout stable
            git pull origin stable --rebase

            if git merge --no-ff main -m "üîÅ Sync coverage badge from main to stable" --allow-unrelated-histories; then

              echo "‚úÖ Merge successful. Pushing to stable..."
              git push origin stable
              git checkout main
            else
              echo "‚ö†Ô∏è Merge conflict detected. Aborting merge to protect stable branch."
              git merge --abort
              echo "‚ö†Ô∏è Merge conflict. Please resolve manually."
              git checkout main 
            fi
          fi
      # end of job
      # end of workflow