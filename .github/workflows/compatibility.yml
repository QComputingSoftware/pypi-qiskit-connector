# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01

name: Python Compatibility

on:
  push:
    branches: [ "pypi" ]
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'    
    - cron: '0 6 * * *'    
    - cron: '0 8 * * *'    
    
permissions:
  contents: write
  actions: write
  deployments: write
  pull-requests: write
  checks: write
  statuses: write
  issues: write
  discussions: write
  pages: write
  packages: write
  security-events: write
  repository-projects: write

env:
  GPG_NAME_REAL: ${{ secrets.GPG_NAME_REAL }}
  GPG_NAME_EMAIL: ${{ secrets.GPG_NAME_EMAIL }}
  GPG_NAME_COMMENT: ${{ secrets.GPG_NAME_COMMENT }}
  GPG_GITHUB_OPERATOR: ${{ secrets.GPG_GITHUB_OPERATOR }}
  EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
  UNAME_CONTRIBUTOR_09: ${{ secrets.UNAME_CONTRIBUTOR_09 }}
  UNAME_CONTRIBUTOR_03: ${{ secrets.UNAME_CONTRIBUTOR_03 }}
  EMAIL_CONTRIBUTOR_09: ${{ secrets.EMAIL_CONTRIBUTOR_09 }}
  EMAIL_CONTRIBUTOR_03: ${{ secrets.EMAIL_CONTRIBUTOR_03 }}

jobs:
  compatibility:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: Qiskit Connector Active State
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          python .github/scripts/pkg_active_check.py

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: üß™ Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: üß™ Test with pytest
        run: pytest
        continue-on-error: true

      - name: ‚úÖ Check pytest result
        if: ${{ always() }}
        run: |
          RC=$?
          if [ "$RC" -eq 5 ]; then
            echo "‚ö†Ô∏è  No tests were collected (exit $RC), skipping."
          elif [ "$RC" -ne 0 ]; then
            echo "‚ùå pytest failed (exit $RC)"
            exit $RC
          else
            echo "‚úÖ pytest passed."
          fi

  generate-badge:
    needs: compatibility
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate Python compatibility badge
        uses: emibcn/badge-action@v2
        with:
          label: 'üêç python'
          status: '3.9 | 3.10 | 3.11 | 3.12 | 3.13'
          color: green
          style: flat
          path: docs/badges/python.svg


     #_____________________________________________________

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch GitHub GPG Keys and Find Matching Key ID
        id: find_key
        run: |
          # EXPECTED_GPG_KEY_ID from secrets should be the 16-character GPG Key ID.
          echo "Searching for GPG key on GitHub with Key ID: $EXPECTED_GPG_KEY_ID"
          
          GPG_KEY_ID_MATCHED="" # Variable to store the matched API key_id
          key_found=false

          next_page_url="https://api.github.com/user/gpg_keys?per_page=100"

          while [[ -n "$next_page_url" ]]; do
              echo "Fetching GPG keys from: $next_page_url"
              header_file=$(mktemp)

              response_body=$(curl -s -L \
                                   -H "Authorization: token $GPG_GITHUB_OPERATOR" \
                                   -H "Accept: application/vnd.github+json" \
                                   -H "X-GitHub-Api-Version: 2022-11-28" \
                                   -D "$header_file" \
                                   "$next_page_url")
              curl_exit_status=$?

              if [ $curl_exit_status -ne 0 ]; then
                  echo "::error::Curl command failed with exit status $curl_exit_status for URL: $next_page_url"
                  rm -f "$header_file"
                  break
              fi

              if ! echo "$response_body" | jq -e '. | type == "array"' > /dev/null; then
                  echo "::warning::Response from $next_page_url was not a JSON array or was empty. Body: $response_body"
              fi

              # The API's 'key_id' field provides a 16-character ID.
              api_provided_key_ids=$(echo "$response_body" | jq -r '.[]? | .key_id // empty')

              if [[ -n "$api_provided_key_ids" ]]; then
                while IFS= read -r current_api_key_id; do # This is the 16-character ID from API
                    if [[ -z "$current_api_key_id" ]]; then
                        continue
                    fi
                    echo "Checking API provided key_id: $current_api_key_id"
                    
                    # Direct comparison: Does the API's 16-char key_id exactly match the 16-char EXPECTED_GPG_KEY_ID from secrets?
                    if [[ "$current_api_key_id" == "$EXPECTED_GPG_KEY_ID" ]]; then
                        echo "::notice::Match found! API Key ID '$current_api_key_id' matches Expected Key ID '$EXPECTED_GPG_KEY_ID'."
                        GPG_KEY_ID_MATCHED="$current_api_key_id"
                        key_found=true
                        break 2 # Exit both loops
                    fi
                done <<< "$api_provided_key_ids"
              fi

              link_header=$(grep -i '^Link:' "$header_file")
              if echo "$link_header" | grep -q 'rel="next"'; then
                  next_page_url=$(echo "$link_header" | sed -n 's/.*<\([^>]*\)>; rel="next".*/\1/p')
                  if [[ -z "$next_page_url" ]]; then
                      echo "::debug::'rel=\"next\"' found, but sed failed to extract URL. Link: $link_header"
                      next_page_url=""
                  fi
              else
                  next_page_url=""
              fi
              rm -f "$header_file"
          done

          if [[ "$key_found" == "true" ]]; then
            echo "Successfully matched API Key ID: $GPG_KEY_ID_MATCHED"
            echo "GPG_KEY_ID=$GPG_KEY_ID_MATCHED" >> $GITHUB_ENV
          else
            # This error message now clearly states what was being looked for.
            echo "::error::Expected GPG Key ID '$EXPECTED_GPG_KEY_ID' (from secrets) not found directly in any of the 'key_id' fields returned by the GitHub API after checking all pages."
            exit 1
          fi

      - name: Verify Found Key ID in Environment
        run: |
          if [[ -z "$GPG_KEY_ID" ]]; then
            echo "::error::GPG_KEY_ID environment variable was not set."
            exit 1
          else
            echo "Verified: GPG Key ID '$GPG_KEY_ID'."
            echo "GPG_KEY_ID is ready for use in subsequent GPG operations."
          fi

      - name: Import GPG Key, Configure Git, and Prepare for Signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Setting GPG_TTY..."
          export GPG_TTY=$(tty)

          echo "Importing GPG key..."
          echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --import <(echo "${GPG_PRIVATE_KEY}")
          if [ $? -ne 0 ]; then
              echo "::error::GPG key import failed."
              exit 1
          fi
          echo "‚úÖ GPG key imported."

          echo "Testing GPG key with a simple sign operation using GPG_KEY_ID: ${GPG_KEY_ID}"
          echo "test data" | echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --clearsign --default-key "${GPG_KEY_ID}" > /dev/null
          if [ $? -ne 0 ]; then
              echo "::error::GPG sign test failed. Passphrase might not be available or key ID ('${GPG_KEY_ID}') is incorrect/ambiguous for GPG."
              exit 1
          fi
          echo "‚úÖ GPG key test successful."

          echo "Configuring git with GPG key details..."
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git config --global user.signingkey "$GPG_KEY_ID" 
          git config --global commit.gpgsign true

          echo "‚úÖ Git and GPG configured. Commits and tags will be signed using key."

      #_____________________________________________________________________________

      - name: üöÄ Push and sync Python compatibility badge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          # Determine current branch
          CURRENT_BRANCH=${GITHUB_REF##*/}
          echo "üîé Current branch is: $CURRENT_BRANCH"

          git fetch origin main stable

          # --- Commit to CURRENT BRANCH (main or stable) ---
          git checkout "$CURRENT_BRANCH"
          git pull origin "$CURRENT_BRANCH" --rebase --autostash

          git add docs/badges/python.svg
          git commit --gpg-sign="${GPG_KEY_ID}" -m "üîß Qiskit Code Update - Inteli Check" || echo "‚ö†Ô∏è No changes to commit"
          git push origin "$CURRENT_BRANCH" || echo "‚ö†Ô∏è Nothing to push"


          # # --- Only sync from MAIN ‚Üí STABLE if we're on main ---
          # if [[ "$CURRENT_BRANCH" == "main" ]]; then
          #   git checkout stable
          #   git pull origin stable --rebase

          #   if git merge --no-ff main -m "üîÅ Sync coverage badge from main to stable" --allow-unrelated-histories; then

          #     echo "‚úÖ Merge successful. Pushing to stable..."
          #     git push origin stable
          #     git checkout main
          #   else
          #     echo "‚ö†Ô∏è Merge conflict detected. Aborting merge to protect stable branch."
          #     git merge --abort
          #     echo "‚ö†Ô∏è Merge conflict. Please resolve manually."
          #     git checkout main 
          #   fi
          # fi
      # end of job
      # end of workflow