# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01 [].........[]
# @Copyright ¬© 2023-2025 Qcon¬Æ - Quantum Computing Connector¬Æ
#===========================================================

name: üß† Qcon Intelligent Core  - Sign & Create Tag ‚Üí

on:
  push:
    branches: ["pypi"]
  workflow_dispatch: 
  schedule:
    - cron: '0 10 * * 0'     

env:
  PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
  GPG_NAME_REAL: ${{ secrets.GPG_NAME_REAL }}
  GPG_NAME_EMAIL: ${{ secrets.GPG_NAME_EMAIL }}
  GPG_NAME_COMMENT: ${{ secrets.GPG_NAME_COMMENT }}
  GPG_GITHUB_OPERATOR: ${{ secrets.GPG_GITHUB_OPERATOR }}
  EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
  UNAME_CONTRIBUTOR_09: ${{ secrets.UNAME_CONTRIBUTOR_09 }}
  UNAME_CONTRIBUTOR_03: ${{ secrets.UNAME_CONTRIBUTOR_03 }}
  EMAIL_CONTRIBUTOR_09: ${{ secrets.EMAIL_CONTRIBUTOR_09 }}
  EMAIL_CONTRIBUTOR_03: ${{ secrets.EMAIL_CONTRIBUTOR_03 }}
  
jobs:
  create_release:
    name: üè∑Ô∏è Create GitHub Release
    runs-on: ubuntu-latest
    permissions: 
      contents: write
      actions: write
      deployments: write
      pull-requests: write
      checks: write
      statuses: write
      issues: write
      discussions: write
      pages: write
      packages: write
      security-events: write
      repository-projects: write
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          submodules: recursive

      - name: Git Hard Reset Main
        run: |
          echo "Setting up Git user..."
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git reset --hard origin/main
          git pull origin main
     ######################################################################################################

      #                            UTILITIES FOR GPG

     #######################################################################################################
      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch GitHub GPG Keys and Find Matching Key ID
        id: find_key
        run: |
          # EXPECTED_GPG_KEY_ID from secrets should be the 16-character GPG Key ID.
          echo "Searching for GPG key on GitHub with Key ID: $EXPECTED_GPG_KEY_ID"
          
          GPG_KEY_ID_MATCHED="" # Variable to store the matched API key_id
          key_found=false

          next_page_url="https://api.github.com/user/gpg_keys?per_page=100"

          while [[ -n "$next_page_url" ]]; do
              echo "Fetching GPG keys from: $next_page_url"
              header_file=$(mktemp)

              response_body=$(curl -s -L \
                                   -H "Authorization: token $GPG_GITHUB_OPERATOR" \
                                   -H "Accept: application/vnd.github+json" \
                                   -H "X-GitHub-Api-Version: 2022-11-28" \
                                   -D "$header_file" \
                                   "$next_page_url")
              curl_exit_status=$?

              if [ $curl_exit_status -ne 0 ]; then
                  echo "::error::Curl command failed with exit status $curl_exit_status for URL: $next_page_url"
                  rm -f "$header_file"
                  break
              fi

              if ! echo "$response_body" | jq -e '. | type == "array"' > /dev/null; then
                  echo "::warning::Response from $next_page_url was not a JSON array or was empty. Body: $response_body"
              fi

              # The API's 'key_id' field provides a 16-character ID.
              api_provided_key_ids=$(echo "$response_body" | jq -r '.[]? | .key_id // empty')

              if [[ -n "$api_provided_key_ids" ]]; then
                while IFS= read -r current_api_key_id; do # This is the 16-character ID from API
                    if [[ -z "$current_api_key_id" ]]; then
                        continue
                    fi
                    echo "Checking API provided key_id: $current_api_key_id"
                    
                    # Direct comparison: Does the API's 16-char key_id exactly match the 16-char EXPECTED_GPG_KEY_ID from secrets?
                    if [[ "$current_api_key_id" == "$EXPECTED_GPG_KEY_ID" ]]; then
                        echo "::notice::Match found! API Key ID '$current_api_key_id' matches Expected Key ID '$EXPECTED_GPG_KEY_ID'."
                        GPG_KEY_ID_MATCHED="$current_api_key_id"
                        key_found=true
                        break 2 # Exit both loops
                    fi
                done <<< "$api_provided_key_ids"
              fi

              link_header=$(grep -i '^Link:' "$header_file")
              if echo "$link_header" | grep -q 'rel="next"'; then
                  next_page_url=$(echo "$link_header" | sed -n 's/.*<\([^>]*\)>; rel="next".*/\1/p')
                  if [[ -z "$next_page_url" ]]; then
                      echo "::debug::'rel=\"next\"' found, but sed failed to extract URL. Link: $link_header"
                      next_page_url=""
                  fi
              else
                  next_page_url=""
              fi
              rm -f "$header_file"
          done

          if [[ "$key_found" == "true" ]]; then
            echo "Successfully matched API Key ID: $GPG_KEY_ID_MATCHED"
            echo "GPG_KEY_ID=$GPG_KEY_ID_MATCHED" >> $GITHUB_ENV
          else
            # This error message now clearly states what was being looked for.
            echo "::error::Expected GPG Key ID '$EXPECTED_GPG_KEY_ID' (from secrets) not found directly in any of the 'key_id' fields returned by the GitHub API after checking all pages."
            exit 1
          fi

      - name: Verify Found Key ID in Environment
        run: |
          if [[ -z "$GPG_KEY_ID" ]]; then
            echo "::error::GPG_KEY_ID environment variable was not set."
            exit 1
          else
            echo "Verified: GPG Key ID '$GPG_KEY_ID'."
            echo "GPG_KEY_ID is ready for use in subsequent GPG operations."
          fi

      - name: Import GPG Key, Configure Git, and Prepare for Signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Setting GPG_TTY..."
          export GPG_TTY=$(tty)

          echo "Importing GPG key..."
          echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --import <(echo "${GPG_PRIVATE_KEY}")
          if [ $? -ne 0 ]; then
              echo "::error::GPG key import failed."
              exit 1
          fi
          echo "‚úÖ GPG key imported."

          echo "Testing GPG key with a simple sign operation using GPG_KEY_ID: ${GPG_KEY_ID}"
          echo "test data" | echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --clearsign --default-key "${GPG_KEY_ID}" > /dev/null
          if [ $? -ne 0 ]; then
              echo "::error::GPG sign test failed. Passphrase might not be available or key ID ('${GPG_KEY_ID}') is incorrect/ambiguous for GPG."
              exit 1
          fi
          echo "‚úÖ GPG key test successful."

          echo "Configuring git with GPG key details..."
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git config --global user.signingkey "$GPG_KEY_ID" 
          git config --global commit.gpgsign true

          echo "‚úÖ Git and GPG configured. Commits and tags will be signed using key."
        ####################################################################################################
        

       #                                     SIGN THE LATEST COMMIT


       #####################################################################################################
      - name: üñäÔ∏è Sign The Latest Commit
        run: |
          echo "üîç Scanning all commits for unsigned or unverified signatures..."
          rev_option_7=$(git rev-list --max-count=3 main)

          for commit in $rev_option_7; do
            sig_output=$(git log --format="%G?:%GS:%GK" -n 1 $commit)
            status=$(echo "$sig_output" | cut -d: -f1)
            signer=$(echo "$sig_output" | cut -d: -f2)
            keyid=$(echo "$sig_output" | cut -d: -f3)

            if [[ "$status" == "B" || "$status" == "U" || "$status" == "N" ]]; then
              echo "üîÑ Re-signing commit: $commit (status: $status, signer: $signer, key: $keyid)"
              GIT_COMMITTER_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_NAME="$GPG_NAME_REAL" \
              GIT_AUTHOR_EMAIL="$GPG_NAME_EMAIL" \
              GIT_COMMITTER_NAME="$GPG_NAME_REAL" \
              GIT_COMMITTER_EMAIL="$GPG_NAME_EMAIL" \

              git commit --amend --no-edit --gpg-sign="$GPG_KEY_ID" || true
              echo "Now Re-Signed with GPG Key ID: $GPG_KEY_ID"

              echo "fetching latest changes from origin..."
              git fetch origin main

              echo "Merging changes from origin/main..."
              git merge origin/main --no-edit --allow-unrelated-histories || echo "‚ö†Ô∏è No unrelated histories to merge"

              echo "Checking for changes to push..."
              sleep 3

              echo "üì§ Pushing commit: $commit"
              git push -f origin HEAD:${{ github.ref_name }}
            else
              echo "‚úÖ Commit $commit already signed and verified. Skipping."
            fi
          done
      #####################################################################################################


      #                    SOFTWARE DESCRIPTOR FOR QCON INTELLIGENCE CORE


      ##############################################################################      
      - name: üß† Qcon¬Æ Software Descriptor
        id: qcon-software-descriptor
        env:
          TAG: ${{ env.TAG }}
        run: |
          python <<EOF
          import os
          from datetime import datetime

          NOTE_FILE = os.path.join('.github', 'scripts', 'DESCRIPTOR.s')
          with open(NOTE_FILE, encoding="utf-8") as qcon:
              QCON_NOTE = qcon.read()

          version = os.environ.get("TAG", "unknown")
          changelog_date = datetime.utcnow().strftime("%Y-%m-%d")

          body_html = QCON_NOTE.format(version=version, changelog_date=changelog_date)

          # Write to GITHUB_ENV for subsequent steps
          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as envf:
              envf.write(f"QCON_NOTE<<EOF\n{body_html}\nEOF\n")

          # Write to GITHUB_OUTPUT for this step's output
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as outf:
              outf.write(f"QCON_NOTE<<EOF\n{body_html}\nEOF\n")
          EOF
      #############################################################################################


      #                    AUDIT RELEASE TAGS WITH QCON INTELLIGENCE CORE


      #############################################################################################
      - name: üß† Qcon¬Æ Intelligence Core - Release Tag Audit (CRT)
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          PROHIBITED=(main stable dev test bug qa pypi lab prod)
          VALID_TAGS=()
          QCON_NOTE="${{ steps.qcon-software-descriptor.outputs.QCON_NOTE }}"
          if [[ -z "$QCON_NOTE" ]]; then
            echo "QCON_NOTE is empty. Exiting - Update the descriptor & try again."
            exit 1
          fi

          # Fetch all tags and Delete Prohibited Tags:
          git fetch --tags --force
          for TAG in $(git tag); do
            is_bad=false
            for BAD in "${PROHIBITED[@]}"; do
              if [[ "$TAG" == *"$BAD"* ]]; then
                echo "üö´ Deleting prohibited tag: $TAG"
                git tag -d "$TAG" 2>/dev/null || true
                git push origin --delete "$TAG" || true
                is_bad=true
                break
              fi
            done
            if [ "$is_bad" = true ]; then
              continue
            fi

            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]{2})?$ ]]; then
              echo "üö´ Deleting invalid format tag: $TAG"
              git tag -d "$TAG" 2>/dev/null || true
              git push origin --delete "$TAG" || true
              continue
            else
              echo "‚úÖ Valid tag and format: $TAG"
            fi

            VALID_TAGS+=("$TAG")
          done

          # Sign the Valid Tags with the GPG Key:
          for TAG in "${VALID_TAGS[@]}"; do
            if git tag -v "$TAG" 2>&1 | grep -q "$EXPECTED_GPG_KEY_ID"; then
              echo "‚úÖ Tag '$TAG' already signed."
            else
              echo "üñäÔ∏è Re-signing tag '$TAG'"
              git tag -d "$TAG"
              git tag -s "$TAG" -m "Signed tag $TAG" -u "$EXPECTED_GPG_KEY_ID" --pinentry-mode loopback --batch
              git push --force origin "refs/tags/$TAG"
            fi

            echo "üöÄ Creating release for tag $TAG"
            PAYLOAD=$(jq -n \
              --arg tag "$TAG" \
              --arg name "Qiskit Connector $TAG" \
              --arg body_header "Quantum Computing Qiskit Connector¬Æ - Real-Time Connector for IBM Quantum Computing QPU." \
              --arg body_html "$QCON_NOTE" \
              '{
                tag_name: $tag,
                name: $name,
                body: ($body_header + "\n\n" + $body_html),
                draft: false,
                generate_release_notes: true,
                prerelease: ($tag | test("-(rc|beta|alpha)[0-9]*$"))
              }'
            )

            RESPONSE_CODE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "$PAYLOAD"
            )

            if [[ "$RESPONSE_CODE" == "201" ]]; then
              echo "‚úÖ Release created for tag: $TAG"
            elif [[ "$RESPONSE_CODE" == "422" && $(grep -c "already_exists" response.json) -gt 0 ]]; then
              echo "‚ÑπÔ∏è Tag release already exists: $TAG"
            else
              echo "‚ùå Error creating release for tag: $TAG"
              cat response.json
            fi
          done
          exit 0
      #################################################################################################


      #                           DISPATCH QCON INTELLIGENCE CORE


      ################################################################################################
      - name: üß† Qcon Intelligence Core Dispatch Activated
        shell: bash
        run: |
          echo "‚è≥ Waiting for 50 seconds before dispatching Qcon Intelligence Core..."
          sleep 50
      
      #[D1]
      - name: üß†  Dispatch Qcon Find and Sign Commit
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: qcon-fsc.yml
          token: ${{ secrets.PAT_GITHUB }}

      #[D2]
      - name: üß†  Dispatch Qcon Find and Sign Tags
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: qcon-fst.yml
          token: ${{ secrets.PAT_GITHUB }}
      
      #[D3]
      - name: üß† Dispatch Qcon Intelligence Core - Release Manager
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: qcon-intelligence-core.yml
          token: ${{ secrets.PAT_GITHUB }}