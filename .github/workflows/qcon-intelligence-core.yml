# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01
# @Description: This workflow is triggered on a schedule to check the quality of the software(Qiskit Connector).
# @ Reference:  This workflow ensures that all necessary checks are performed regularly to maintain software integrity.
# @Copyright: 2025 Dr. Jeffrey Chijioke-Uche, Quantum Computing Qiskit Connector.
#_____________________________________________________________________________________________________________________

name: üß† Qcon¬Æ Intelligence Core - Release Manager

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  deployments: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
  GPG_NAME_REAL: ${{ secrets.GPG_NAME_REAL }}
  GPG_NAME_EMAIL: ${{ secrets.GPG_NAME_EMAIL }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_GITHUB_OPERATOR: ${{ secrets.GPG_GITHUB_OPERATOR }}
  EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
  UNAME_CONTRIBUTOR_09: ${{ secrets.UNAME_CONTRIBUTOR_09 }}
  UNAME_CONTRIBUTOR_03: ${{ secrets.UNAME_CONTRIBUTOR_03 }}
  EMAIL_CONTRIBUTOR_09: ${{ secrets.EMAIL_CONTRIBUTOR_09 }}
  EMAIL_CONTRIBUTOR_03: ${{ secrets.EMAIL_CONTRIBUTOR_03 }}

#######

jobs:
  qcon-intelligence-core:
    name: üß† Qcon¬Æ Intelligence Core
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Setup Git Identity
        run: |
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"

      - name: üß† Qcon¬Æ Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üîê Qcon¬Æ Find Matching GPG Key ID on GitHub
        id: find_key
        run: |
          echo "Looking for expected GPG key: $EXPECTED_GPG_KEY_ID"
          key_found=false
          next_page_url="https://api.github.com/user/gpg_keys?per_page=100"
          while [[ -n "$next_page_url" ]]; do
            header_file=$(mktemp)
            response_body=$(curl -s -L               -H "Authorization: token $GPG_GITHUB_OPERATOR"               -H "Accept: application/vnd.github+json"               -D "$header_file"               "$next_page_url")
            if ! echo "$response_body" | jq -e '. | type == "array"' > /dev/null; then
              echo "::error:: Failed to fetch keys."
              break
            fi
            api_keys=$(echo "$response_body" | jq -r '.[]?.key_id // empty')
            for current_key_id in $api_keys; do
              if [[ "$current_key_id" == "$EXPECTED_GPG_KEY_ID" ]]; then
                echo "Match found: $current_key_id"
                echo "GPG_KEY_ID=$current_key_id" >> $GITHUB_ENV
                key_found=true
                break 2
              fi
            done
            link_header=$(grep -i '^Link:' "$header_file")
            next_page_url=$(echo "$link_header" | sed -n 's/.*<\([^>]*\)>; rel="next".*/\1/p')
            rm -f "$header_file"
          done
          if [[ "$key_found" != "true" ]]; then
            echo "::error:: GPG Key ID not found."
            exit 1
          fi

      - name: üîê Qcon¬Æ Intelligence Core - Import and Trust GPG Key
        run: |
          export GPG_TTY=$(tty)
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --import
          echo "test data" | echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --clearsign --default-key "$EXPECTED_GPG_KEY_ID" > /dev/null
          git config --global user.signingkey "$EXPECTED_GPG_KEY_ID"
          git config --global commit.gpgsign true
          echo "GPG key imported and trusted successfully."



      - name: üß† Qcon¬Æ Software Descriptor
        id: qcon-software-descriptor
        env:
          TAG: ${{ env.TAG }}
        run: |
          python <<EOF
          import os
          from datetime import datetime

          NOTE_FILE = os.path.join('.github', 'scripts', 'DESCRIPTOR.s')
          with open(NOTE_FILE, encoding="utf-8") as qcon:
              QCON_NOTE = qcon.read()

          version = os.environ.get("TAG", "unknown")
          changelog_date = datetime.utcnow().strftime("%Y-%m-%d")

          body_html = QCON_NOTE.format(version=version, changelog_date=changelog_date)

          # Write to GITHUB_ENV for subsequent steps
          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as envf:
              envf.write(f"QCON_NOTE<<EOF\n{body_html}\nEOF\n")

          # Write to GITHUB_OUTPUT for this step's output
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as outf:
              outf.write(f"QCON_NOTE<<EOF\n{body_html}\nEOF\n")
          EOF


      # - name: üß† Qcon¬Æ Software Descriptor
      #   id: qcon-software-descriptor
      #   run: |
      #     QCON_NOTE="Qiskit Connector¬Æ release $TAG as published on PyPI. Qiskit Connector¬Æ is quantum computing open-source SDK extension. The Qiskit Connector¬Æ transforms how quantum developers connect to IBM Quantum backends by automating every step of the authentication, plan detection, and backend selection process. Instead of writing extensive boilerplate setup code for each project, developers can now seamlessly authenticate, dynamically detect whether they are using an Open or Paid plan, and instantly access the optimal backend QPUresource which is least-busy using a single intuitive keyword: backend. The connector intelligently manages quantum computing plan environment variables and Qiskit runtime service configuration for sticky reusability of QPU resources from the backend, allowing quantum developers to streamline connection workflows and immediately focus on building, testing, and scaling quantum applications.

      #     [Qiskit Connector¬Æ on PyPI](https://pypi.org/project/qiskit-connector)
      #     "
      #         {
      #           echo 'QCON_NOTE<<EOF'
      #           echo "$QCON_NOTE"
      #           echo EOF
      #         } >> $GITHUB_ENV

      #         {
      #           echo 'QCON_NOTE<<EOF'
      #           echo "$QCON_NOTE"
      #           echo EOF
      #         } >> $GITHUB_OUTPUT


      - name: üß† Qcon¬Æ Intelligence Core - Audit and Manage Signed Releases
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          PROHIBITED=(main stable dev test bug qa pypi lab prod)
          VALID_TAGS=()
          QCON_NOTE="${{ steps.qcon-software-descriptor.outputs.QCON_NOTE }}"
          if [[ -z "$QCON_NOTE" ]]; then
            echo "QCON_NOTE is empty. Exiting - Update the descriptor & try again."
            exit 1
          fi

          # Fetch all tags and Delete Prohibited Tags:
          git fetch --tags --force
          for TAG in $(git tag); do
            is_bad=false
            for BAD in "${PROHIBITED[@]}"; do
              if [[ "$TAG" == *"$BAD"* ]]; then
                echo "üö´ Deleting prohibited tag: $TAG"
                git tag -d "$TAG" 2>/dev/null || true
                git push origin --delete "$TAG" || true
                is_bad=true
                break
              fi
            done
            if [ "$is_bad" = true ]; then
              continue
            fi

            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]{2})?$ ]]; then
              echo "üö´ Deleting invalid format tag: $TAG"
              git tag -d "$TAG" 2>/dev/null || true
              git push origin --delete "$TAG" || true
              continue
            else
              echo "‚úÖ Valid tag and format: $TAG"
            fi

            VALID_TAGS+=("$TAG")
          done


          # Sign the Valid Tags with the GPG Key:
          for TAG in "${VALID_TAGS[@]}"; do
            if git tag -v "$TAG" 2>&1 | grep -q "$EXPECTED_GPG_KEY_ID"; then
              echo "‚úÖ Tag '$TAG' already signed."
            else
              echo "üñäÔ∏è Re-signing tag '$TAG'"
              git tag -d "$TAG"
              git tag -s "$TAG" -m "Signed tag $TAG" -u "$EXPECTED_GPG_KEY_ID" --pinentry-mode loopback --batch
              git push --force origin "refs/tags/$TAG"
            fi

            echo "üöÄ Creating release for tag $TAG"
            PAYLOAD=$(jq -n \
              --arg tag "$TAG" \
              --arg name "Qiskit Connector $TAG" \
              --arg body_header "Quantum Computing Qiskit Connector¬Æ - Real-Time Connector for IBM Quantum Computing QPU." \
              --arg body_html "$QCON_NOTE" \
              '{
                tag_name: $tag,
                name: $name,
                body: ($body_header + "\n\n" + $body_html),
                draft: false,
                generate_release_notes: true,
                prerelease: ($tag | test("-(rc|beta|alpha)[0-9]*$"))
              }'
            )

            RESPONSE_CODE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "$PAYLOAD"
            )

            if [[ "$RESPONSE_CODE" == "201" ]]; then
              echo "‚úÖ Release created for tag: $TAG"
            elif [[ "$RESPONSE_CODE" == "422" && $(grep -c "already_exists" response.json) -gt 0 ]]; then
              echo "‚ÑπÔ∏è Tag release already exists: $TAG"
            else
              echo "‚ùå Error creating release for tag: $TAG"
              cat response.json
            fi
          done