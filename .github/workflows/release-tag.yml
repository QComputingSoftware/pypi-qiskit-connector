# @Author: Dr. Jeffrey Chijioke-Uche, IBM Quantum Ambassador
# @last update: 2025-03-01

name: Sync Tag ‚Üí GitHub Release

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'
      - '[0-9]*.[0-9]*.[0-9]*'
  workflow_dispatch: 
  schedule:
    - cron: '0 10 * * 0'    #

env:
  GPG_NAME_REAL: ${{ secrets.GPG_NAME_REAL }}
  GPG_NAME_EMAIL: ${{ secrets.GPG_NAME_EMAIL }}
  GPG_NAME_COMMENT: ${{ secrets.GPG_NAME_COMMENT }}
  GPG_GITHUB_OPERATOR: ${{ secrets.GPG_GITHUB_OPERATOR }}
  EXPECTED_GPG_KEY_ID: ${{ secrets.EXPECTED_GPG_KEY_ID }}
  UNAME_CONTRIBUTOR_09: ${{ secrets.UNAME_CONTRIBUTOR_09 }}
  UNAME_CONTRIBUTOR_03: ${{ secrets.UNAME_CONTRIBUTOR_03 }}
  EMAIL_CONTRIBUTOR_09: ${{ secrets.EMAIL_CONTRIBUTOR_09 }}
  EMAIL_CONTRIBUTOR_03: ${{ secrets.EMAIL_CONTRIBUTOR_03 }}
  
jobs:
  create_release:
    name: üè∑Ô∏è Create GitHub Release
    runs-on: ubuntu-latest
    permissions: 
      contents: write
      actions: write
      deployments: write
      pull-requests: write
      checks: write
      statuses: write
      issues: write
      discussions: write
      pages: write
      packages: write
      security-events: write
      repository-projects: write
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          submodules: recursive

      - name: Git Hard Reset Main
        run: |
          echo "Setting up Git user..."
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git reset --hard origin/main
          git pull origin main
     #_____________________________________________________
      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch GitHub GPG Keys and Find Matching Key ID
        id: find_key
        run: |
          # EXPECTED_GPG_KEY_ID from secrets should be the 16-character GPG Key ID.
          echo "Searching for GPG key on GitHub with Key ID: $EXPECTED_GPG_KEY_ID"
          
          GPG_KEY_ID_MATCHED="" # Variable to store the matched API key_id
          key_found=false

          next_page_url="https://api.github.com/user/gpg_keys?per_page=100"

          while [[ -n "$next_page_url" ]]; do
              echo "Fetching GPG keys from: $next_page_url"
              header_file=$(mktemp)

              response_body=$(curl -s -L \
                                   -H "Authorization: token $GPG_GITHUB_OPERATOR" \
                                   -H "Accept: application/vnd.github+json" \
                                   -H "X-GitHub-Api-Version: 2022-11-28" \
                                   -D "$header_file" \
                                   "$next_page_url")
              curl_exit_status=$?

              if [ $curl_exit_status -ne 0 ]; then
                  echo "::error::Curl command failed with exit status $curl_exit_status for URL: $next_page_url"
                  rm -f "$header_file"
                  break
              fi

              if ! echo "$response_body" | jq -e '. | type == "array"' > /dev/null; then
                  echo "::warning::Response from $next_page_url was not a JSON array or was empty. Body: $response_body"
              fi

              # The API's 'key_id' field provides a 16-character ID.
              api_provided_key_ids=$(echo "$response_body" | jq -r '.[]? | .key_id // empty')

              if [[ -n "$api_provided_key_ids" ]]; then
                while IFS= read -r current_api_key_id; do # This is the 16-character ID from API
                    if [[ -z "$current_api_key_id" ]]; then
                        continue
                    fi
                    echo "Checking API provided key_id: $current_api_key_id"
                    
                    # Direct comparison: Does the API's 16-char key_id exactly match the 16-char EXPECTED_GPG_KEY_ID from secrets?
                    if [[ "$current_api_key_id" == "$EXPECTED_GPG_KEY_ID" ]]; then
                        echo "::notice::Match found! API Key ID '$current_api_key_id' matches Expected Key ID '$EXPECTED_GPG_KEY_ID'."
                        GPG_KEY_ID_MATCHED="$current_api_key_id"
                        key_found=true
                        break 2 # Exit both loops
                    fi
                done <<< "$api_provided_key_ids"
              fi

              link_header=$(grep -i '^Link:' "$header_file")
              if echo "$link_header" | grep -q 'rel="next"'; then
                  next_page_url=$(echo "$link_header" | sed -n 's/.*<\([^>]*\)>; rel="next".*/\1/p')
                  if [[ -z "$next_page_url" ]]; then
                      echo "::debug::'rel=\"next\"' found, but sed failed to extract URL. Link: $link_header"
                      next_page_url=""
                  fi
              else
                  next_page_url=""
              fi
              rm -f "$header_file"
          done

          if [[ "$key_found" == "true" ]]; then
            echo "Successfully matched API Key ID: $GPG_KEY_ID_MATCHED"
            echo "GPG_KEY_ID=$GPG_KEY_ID_MATCHED" >> $GITHUB_ENV
          else
            # This error message now clearly states what was being looked for.
            echo "::error::Expected GPG Key ID '$EXPECTED_GPG_KEY_ID' (from secrets) not found directly in any of the 'key_id' fields returned by the GitHub API after checking all pages."
            exit 1
          fi

      - name: Verify Found Key ID in Environment
        run: |
          if [[ -z "$GPG_KEY_ID" ]]; then
            echo "::error::GPG_KEY_ID environment variable was not set."
            exit 1
          else
            echo "Verified: GPG Key ID '$GPG_KEY_ID'."
            echo "GPG_KEY_ID is ready for use in subsequent GPG operations."
          fi

      - name: Import GPG Key, Configure Git, and Prepare for Signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Setting GPG_TTY..."
          export GPG_TTY=$(tty)

          echo "Importing GPG key..."
          echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --import <(echo "${GPG_PRIVATE_KEY}")
          if [ $? -ne 0 ]; then
              echo "::error::GPG key import failed."
              exit 1
          fi
          echo "‚úÖ GPG key imported."

          echo "Testing GPG key with a simple sign operation using GPG_KEY_ID: ${GPG_KEY_ID}"
          echo "test data" | echo "${GPG_PASSPHRASE}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --clearsign --default-key "${GPG_KEY_ID}" > /dev/null
          if [ $? -ne 0 ]; then
              echo "::error::GPG sign test failed. Passphrase might not be available or key ID ('${GPG_KEY_ID}') is incorrect/ambiguous for GPG."
              exit 1
          fi
          echo "‚úÖ GPG key test successful."

          echo "Configuring git with GPG key details..."
          git config --global user.name "$GPG_NAME_REAL"
          git config --global user.email "$GPG_NAME_EMAIL"
          git config --global user.signingkey "$GPG_KEY_ID" 
          git config --global commit.gpgsign true

          echo "‚úÖ Git and GPG configured. Commits and tags will be signed using key."
        #_____________________________________________________________________________


      - name: üñäÔ∏è Sign The Latest Commit
        run: |
          echo "üîç Scanning all commits for unsigned or unverified signatures..."
          rev_option_7=$(git rev-list --max-count=3 main)

          for commit in $rev_option_7; do
            sig_output=$(git log --format="%G?:%GS:%GK" -n 1 $commit)
            status=$(echo "$sig_output" | cut -d: -f1)
            signer=$(echo "$sig_output" | cut -d: -f2)
            keyid=$(echo "$sig_output" | cut -d: -f3)

            if [[ "$status" == "B" || "$status" == "U" || "$status" == "N" ]]; then
              echo "üîÑ Re-signing commit: $commit (status: $status, signer: $signer, key: $keyid)"
              GIT_COMMITTER_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_DATE="$(git show -s --format=%ci $commit)" \
              GIT_AUTHOR_NAME="$GPG_NAME_REAL" \
              GIT_AUTHOR_EMAIL="$GPG_NAME_EMAIL" \
              GIT_COMMITTER_NAME="$GPG_NAME_REAL" \
              GIT_COMMITTER_EMAIL="$GPG_NAME_EMAIL" \

              git commit --amend --no-edit --gpg-sign="$GPG_KEY_ID" || true
              echo "Now Re-Signed with GPG Key ID: $GPG_KEY_ID"

              echo "fetching latest changes from origin..."
              git fetch origin main

              echo "Merging changes from origin/main..."
              git merge origin/main --no-edit --allow-unrelated-histories || echo "‚ö†Ô∏è No unrelated histories to merge"

              echo "Checking for changes to push..."
              sleep 3

              echo "üì§ Pushing commit: $commit"
              git push -f origin HEAD:${{ github.ref_name }}
            else
              echo "‚úÖ Commit $commit already signed and verified. Skipping."
            fi
          done

      #=============================================================
      - name: üîç Checking Release Tag Naming Violation
        shell: bash
        run: |
          echo "üîé Validating tag: ${{ github.ref_name }}"

          TAG="${{ github.ref_name }}"
          PROHIBITED_TAGS=(main stable pypi bug dev prod qa test lab)

          for word in "${PROHIBITED_TAGS[@]}"; do
            if [[ "$TAG" == *"$word"* ]]; then
              echo "üö´ Tag name '$TAG' contains prohibited keyword: '$word'"
              echo "üóëÔ∏è Deleting invalid tag (locally and remotely)..."

              git tag -d "$TAG" || echo "‚ö†Ô∏è Local tag '$TAG' not found or already deleted."
              git push origin :refs/tags/"$TAG" || echo "‚ö†Ô∏è Remote tag '$TAG' not found or already deleted."

              echo "üßπ Tag '$TAG' deleted due to naming violation."
              exit 0
            fi
          done

          # Enforce semantic versioning: x.y.z or x.y.z-rc01
          if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]{2})?$ ]]; then
            echo "üö´ Tag '$TAG' does not follow semantic version pattern like '2.2.6' or '2.1.5-rc01'"

            git tag -d "$TAG" || echo "‚ö†Ô∏è Local tag '$TAG' not found or already deleted."
            git push origin :refs/tags/"$TAG" || echo "‚ö†Ô∏è Remote tag '$TAG' not found or already deleted."

            echo "üßπ Tag '$TAG' deleted due to naming pattern violation."
            exit 0
          fi

          echo "‚úÖ All Clear! Tag '$TAG' passed validation."
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # ================================
      - name: üßæ Create GitHub Release with fallback for existing tags
        shell: bash
        run: |
          echo "ü™™ Tag detected: ${{ github.ref_name }}"
          echo "‚öôÔ∏è Attempting to create GitHub Release..."

          json=$(
            jq -n --arg tag "${{ github.ref_name }}" --arg body "Auto‚Äêgenerated release for tag ${{ github.ref_name }}" '{
              tag_name: $tag,
              name: "Release \($tag)",
              body: $body,
              draft: false,
              prerelease: ($tag | test("-"))
            }'
          )

          response=$(curl -s -o response.json -w "%{http_code}" \
            -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
            -H "Authorization: token ${{ secrets.PAT_GITHUB }}" \
            -H "Accept: application/vnd.github+json" \
            -d "$json")

          if [[ "$response" == "201" ]]; then
            echo "‚úÖ Release created successfully."
          elif [[ "$response" == "422" ]]; then
            echo "‚ö†Ô∏è Release already exists. Skipping creation."
          else
            echo "‚ùå Unexpected error occurred:"
            cat response.json
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
      # ================================