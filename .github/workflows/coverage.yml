name: Qiskit Connector Code Coverage Analysis
description: |
  This workflow runs code coverage analysis on the Qiskit Connector repository.
  It generates a coverage badge and pushes it to the repository.
  The badge is stored in the `docs/badges` directory.
  The workflow is triggered on pushes and pull requests to the `main` and `stable` branches.
  It uses the `emibcn/badge-action` to generate the badge.
  The badge is updated only if the coverage percentage changes.
  The workflow uses the `actions/checkout` action to check out the repository.
  The workflow uses the `actions/setup-python` action to set up Python.
  The workflow uses the `actions/github-script` action to run JavaScript code.

on:
  push:
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  actions: write
  checks: write
  pull-requests: write
  statuses: write
  deployments: write

jobs:
  coverage-badge:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install pytest coverage pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install qiskit-connector

      - name: 🧪 Run tests with coverage
        run: coverage run --source=qiskit_connector -m pytest

      - name: 📊 Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          echo "coverage=$COVERAGE%" >> "$GITHUB_OUTPUT"

      - name: 📂 Ensure badge directory exists
        run: mkdir -p docs/badges

      # valid inputs are ['label', 'label-color', 'status', 'color', 'style', 'icon', 'icon-width', 'scale', 'path']
      - name: 🛠️ Generate coverage badge
        uses: emibcn/badge-action@v2
        with:
          label: "Qiskit Connector Code Coverage Analysis"
          label-color: "555"
          status: "${{ steps.coverage.outputs.coverage }}"
          color: "green"
          style: "classic"
          path: "docs/badges/coverage.svg"

      #____________________________________________________
      # --- Check if the badge has changed ---------------
      # --- Commit and push the badge to the repository ---
      #____________________________________________________
      - name: 🚀 Commit badge and safely sync main → stable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          git fetch --all # Fetch all branches

          # --- Commit to MAIN ---
          git checkout main
          git pull origin main --rebase --autostash

          git add docs/badges/coverage.svg
          git commit -m "🛡️ Update coverage badge to ${{ steps.coverage.outputs.coverage }}" || echo "⚠️ No changes to commit"
          git push origin main

          # --- Merge MAIN into STABLE ---
          git checkout stable
          git pull origin stable --rebase

          if git merge --no-ff main -m "🔁 Sync coverage badge from main to stable" --allow-unrelated-histories; then
            echo "✅ Merge successful"
            git push origin stable
            git checkout main
          else
            echo "⚠️ Merge conflict detected. Aborting to protect stable branch."
            git merge --abort
            echo "⚠️ Merge conflict. Please resolve manually."
            git checkout main
          fi
# --- End of job ---